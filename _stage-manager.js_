// Stage Manager functionality
let stageManagerActive = false;

export function initStageManager() {
    const stageManager = document.createElement('div');
    stageManager.className = 'stage-manager';
    stageManager.style.display = 'none';
    document.body.appendChild(stageManager);

    const toggleButton = document.createElement('div');
    toggleButton.className = 'stage-manager-toggle';
    toggleButton.innerHTML = `
        <svg viewBox="0 0 24 24">
            <path d="M3,3H21V21H3V3M5,5V19H19V5H5Z"/>
        </svg>
    `;
    toggleButton.addEventListener('click', toggleStageManager);
    document.body.appendChild(toggleButton);

    document.addEventListener('windowCreated', requestStageManagerUpdate);
    document.addEventListener('windowClosed', requestStageManagerUpdate);
    document.addEventListener('windowFocused', requestStageManagerUpdate);
}

let updateQueued = false;

function requestStageManagerUpdate() {
    if (!updateQueued) {
        updateQueued = true;
        requestAnimationFrame(() => {
            updateStageManager();
            updateQueued = false;
        });
    }
}

export function toggleStageManager() {
    stageManagerActive = !stageManagerActive;
    const stageManager = document.querySelector('.stage-manager');
    stageManager.style.display = stageManagerActive ? 'flex' : 'none';

    if (stageManagerActive) requestStageManagerUpdate();
}

export function updateStageManager() {
    if (!stageManagerActive) return;

    const stageManager = document.querySelector('.stage-manager');
    stageManager.innerHTML = ''; // clear previous previews

    const windows = Array.from(document.querySelectorAll('.window'))
        .filter(w => w.style.display !== 'none' && !w.classList.contains('minimized'));

    const highestZ = getHighestZIndex();

    for (const win of windows) {
        const appName = win.dataset.app || 'App';
        const appIcon = getAppIcon(appName);
        const isActive = parseInt(win.style.zIndex || 0) === highestZ;

        const preview = document.createElement('div');
        preview.className = `stage-preview ${isActive ? 'active' : ''}`;

        const previewContent = document.createElement('div');
        previewContent.className = 'preview-content';
        preview.appendChild(previewContent);

        const iconImg = document.createElement('img');
        iconImg.src = appIcon;
        iconImg.alt = appName;
        iconImg.className = 'preview-app-icon';
        preview.appendChild(iconImg);

        preview.addEventListener('click', () => bringToFront(win));
        stageManager.appendChild(preview);

        const content = win.querySelector('.window-content');

        if (content) {
            const liveView = content.cloneNode(true);

            // For live vision, use forced clone content instead of standard preview
            const iframes = liveView.querySelectorAll('iframe');
            iframes.forEach(iframe => {
                const placeholder = document.createElement('div');
                placeholder.textContent = 'Live Preview';
                placeholder.style.width = '100%';
                placeholder.style.height = '100%';
                placeholder.style.display = 'flex';
                placeholder.style.alignItems = 'center';
                placeholder.style.justifyContent = 'center';
                placeholder.style.background = '#ccc';
                placeholder.style.color = '#333';
                placeholder.style.fontSize = '12px';
                placeholder.style.fontWeight = 'bold';
                iframe.replaceWith(placeholder);
            });

            const wrapper = document.createElement('div');
            wrapper.style.transform = 'scale(0.25)';
            wrapper.style.transformOrigin = 'top left';
            wrapper.style.width = '400%';
            wrapper.style.height = '400%';
            wrapper.style.pointerEvents = 'none';
            wrapper.appendChild(liveView);

            previewContent.appendChild(wrapper);
        }
    }
}

function getAppIcon(appName) {
    const iconEntry = window.config?.dockIcons.find(i => i.name.toLowerCase() === appName.toLowerCase());
    if (iconEntry) return iconEntry.iconUrl;

    const dockIcon = document.querySelector(`.dock-icon[data-name="${appName}"] img`);
    if (dockIcon) return dockIcon.src;

    return 'https://macosicons.com/api/icons/Finder_macOS_Big_Sur/auto';
}

function getHighestZIndex() {
    return Math.max(...Array.from(document.querySelectorAll('.window')).map(w => parseInt(w.style.zIndex || 1000)));
}

function bringToFront(winElem) {
    const maxZ = getHighestZIndex();
    winElem.style.zIndex = maxZ + 1;

    const event = new CustomEvent('windowFocused', { detail: { window: winElem } });
    document.dispatchEvent(event);
}